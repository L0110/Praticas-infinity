/*

Crie um programa em que permita ao usu√°rio gerenciar uma lista de tarefas usando arrays e loops. O programa deve oferecer as op√ß√µes de adicionar, remover, listar e concluir tarefas, enquanto manipula o array de tarefas e utiliza loops para percorr√™-lo.

Requisitos do Projeto:
* Adicionar Tarefas:
- Solicite ao usu√°rio o nome de uma tarefa e adicione-a ao final do array usando o m√©todo push().

* Listar Tarefas:
- Use um loop for ou for...of para percorrer o array de tarefas e exibi-las com seus √≠ndices.

* Remover Tarefas:
- Solicite ao usu√°rio o √≠ndice da tarefa que deseja remover e utilize o m√©todo splice() para remov√™-la do array.


* Concluir Tarefas (Opcional):
- Pe√ßa ao usu√°rio o √≠ndice de uma tarefa e marque-a como conclu√≠da, modificando a string para algo como "‚úÖ Lavar a lou√ßa".

* Intera√ß√£o Cont√≠nua:
- Utilize um loop while para continuar solicitando a√ß√µes do usu√°rio (adicionar, listar, remover, concluir) at√© que ele escolha sair.

*/

// * Adicionar Tarefas:
let tarefas = [];
let id = 0;
let tarefa = null;
let status = null;
let op = null;

//avisos
const avisoCadastroSucesso = (tarefa) => `[Tarefa adicionada com sucesso!]: "${tarefa}"`;
const avisoOpInvalida = "Informe uma op√ß√£o v√°lida";
const opMenu = "1 - Adicionar tarefa\n2 - Listar tarefa\n3 - Remover tarefa\n4 - Concluir tarefa\n0 - Sair\n[digite uma op√ß√£o]:";


function adicionarTarefa() {
    let tarefa = prompt("[Nova tarefa]:");
    let status = "‚ùå";
    tarefas.push({ id, tarefa, status });
    id++;
    console.log(avisoCadastroSucesso(tarefa));
    alert(avisoCadastroSucesso(tarefa));
}
// * Listar Tarefas:
function listarTarefas() {
    if (tarefas.length === 0) {
        console.log("Nenhuma tarefa cadastrada!");
        return;
    }
    console.log("\nLista de Tarefas:");
    for (let item of tarefas) {
        console.log(`[${item.id}] ${item.tarefa} ${item.status}`);
    }
}
// * Remover Tarefas:
function removerTarefa() {
    let seletor = null;
    seletor = parseInt(prompt("[Informe o ID da tarefa]: "));
    if (seletor != null) {
        tarefas.splice(seletor, 1);
        for (let i = 0; i < tarefas.length; i++) {
            tarefas[i].id = i;
            if (tarefas.length > 0) {
                id = i + 1;
            }
        }
        return console.log("Tarefa removida üßπ");

    } else {
        return console.log("erro ao remover ‚ùå");
    }
}
// * Concluir Tarefas (Opcional):
function alterarStatus() {
    let seletor = null;
    seletor = parseInt(prompt("[Informe o ID da tarefa]: "));
    if (seletor != null && seletor < tarefas.length) {
        tarefas[seletor].status = "‚úÖ";
        console.log(`Tarefa conclu√≠da: "${tarefas[seletor].tarefa}"`);
        alert(`Tarefa conclu√≠da: "${tarefas[seletor].tarefa}"`);
    } else {
        console.log("ID inv√°lido ‚ùå");
        alert("ID inv√°lido ‚ùå");
    }
}
// * Intera√ß√£o Cont√≠nua:

function opcoes() {
    console.log(opMenu);
    op = parseInt(prompt(opMenu));
}
function menu() {
    switch (op) {
        case 0:
            console.log("Programa finalizado!");
            return false;
        case 1:
            adicionarTarefa();
            break;
        case 2:
            listarTarefas();
            break;
        case 3:
            removerTarefa();
            break;
        case 4:
            alterarStatus();
            break;
        default:
            alert(avisoOpInvalida);
    }
    return true;
}

let continuar = true;
while (continuar) {
    opcoes();
    continuar = menu();
} opcoes();
menu();